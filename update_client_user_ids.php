<?php

require_once 'vendor/autoload.php';

$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use App\Models\User;
use App\Models\Client;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

echo "ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╕нр╕▒р╕Юр╣Ар╕Фр╕Х user_id р╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З clients\n";
echo "==========================================\n\n";

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕З
echo "ЁЯУК р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕З clients:\n";
$columns = Schema::getColumnListing('clients');
foreach ($columns as $column) {
    echo "- {$column}\n";
}

echo "\n";

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡ user_id field р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
if (in_array('user_id', $columns)) {
    echo "тЬЕ р╕Хр╕▓р╕гр╕▓р╕З clients р╕бр╕╡ user_id field р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з\n";
} else {
    echo "тЭМ р╕Хр╕▓р╕гр╕▓р╕З clients р╣Др╕бр╣Ир╕бр╕╡ user_id field\n";
    echo "ЁЯФз р╣Ар╕Юр╕┤р╣Ир╕б user_id field...\n";
    
    Schema::table('clients', function ($table) {
        $table->foreignId('user_id')->nullable()->after('id')->constrained()->onDelete('cascade');
    });
    
    echo "тЬЕ р╣Ар╕Юр╕┤р╣Ир╕б user_id field р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в\n";
}

echo "\n";

// р╕нр╣Ир╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б backup
echo "ЁЯУВ р╕нр╣Ир╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б backup...\n";
$backupFile = storage_path('backups/clients_backup_2025-06-19_19-21-52.json');

if (!file_exists($backupFile)) {
    echo "тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М backup\n";
    exit(1);
}

$backupData = json_decode(file_get_contents($backupFile), true);

if (!$backupData) {
    echo "тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕нр╣Ир╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е backup р╣Др╕Фр╣Й\n";
    exit(1);
}

echo "тЬЕ р╕нр╣Ир╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е backup р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в (" . count($backupData) . " р╕гр╕▓р╕вр╕Бр╕▓р╕г)\n";

// р╕кр╕гр╣Йр╕▓р╕З map р╕Вр╕нр╕З client_uid р╕Бр╕▒р╕Ъ user_id
$clientUserMap = [];
foreach ($backupData as $client) {
    if (isset($client['client_uid']) && isset($client['user_id'])) {
        $clientUserMap[$client['client_uid']] = $client['user_id'];
    }
}

echo "ЁЯУЛ р╕кр╕гр╣Йр╕▓р╕З map р╕Вр╣Йр╕нр╕бр╕╣р╕е: " . count($clientUserMap) . " р╕гр╕▓р╕вр╕Бр╕▓р╕г\n";

// р╕нр╕▒р╕Юр╣Ар╕Фр╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З clients
echo "\nЁЯФД р╕нр╕▒р╕Юр╣Ар╕Фр╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З clients...\n";
$updatedCount = 0;
$notFoundCount = 0;

foreach ($clientUserMap as $clientUid => $userId) {
    $result = DB::table('clients')
        ->where('client_uid', $clientUid)
        ->update(['user_id' => $userId]);
    
    if ($result > 0) {
        $updatedCount++;
    } else {
        $notFoundCount++;
    }
}

echo "тЬЕ р╕нр╕▒р╕Юр╣Ар╕Фр╕Хр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в: {$updatedCount} р╕гр╕▓р╕вр╕Бр╕▓р╕г\n";
echo "тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З: {$notFoundCount} р╕гр╕▓р╕вр╕Бр╕▓р╕г\n";

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
echo "\nЁЯУК р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М:\n";

$users = User::whereIn('email', ['hamsftmo@gmail.com', 'Janischa.trade@gmail.com', 'kantapong0592@gmail.com'])->get();

foreach ($users as $user) {
    echo "\nЁЯУз р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й: {$user->name} ({$user->email}) - ID: {$user->id}\n";
    
    $clients = Client::where('user_id', $user->id)->get();
    
    if ($clients->isEmpty()) {
        echo "   тЪая╕П  р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕╣р╕Бр╕Др╣Йр╕▓\n";
        continue;
    }
    
    echo "   ЁЯУК р╕Юр╕Ър╕ер╕╣р╕Бр╕Др╣Йр╕▓ {$clients->count()} р╕гр╕▓р╕вр╕Бр╕▓р╕г\n";
    
    // р╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕┤р╕Хр╕┤ client_status
    $statusCounts = $clients->groupBy('client_status')->map->count();
    echo "   ЁЯУИ р╕кр╕Цр╕┤р╕Хр╕┤ client_status:\n";
    foreach ($statusCounts as $status => $count) {
        echo "      - {$status}: {$count} р╕гр╕▓р╕вр╕Бр╕▓р╕г\n";
    }
}

echo "\nтЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╕нр╕▒р╕Юр╣Ар╕Фр╕Хр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!\n"; 